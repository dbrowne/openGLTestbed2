
********************************************************************
********************************************************************
*  CSCI 5229  - Schreuder Computer Graphics
* Dwight Browne
* Final project   DRAGONFLY SCREEN SAVER
* Key Bindings:
* Arrows change view angle
* ESC Exit
* home_key or h:  set Azimuth and elevation to 0.
* w move camera forward.
* a move camera left.
* s move camera back.
* d move camera right.
* SPACE stop Light animation.

* y rotate sphere by y
* z rotate sphere by z
* p toggle perspective. A debugging function only
* l  Toggle lighting.
* o  Toggle Polygon mode
* t  Toggle Texture
* g  Toggle view motion
* n  step light down
* m  step light up
* y  Toggle wing motion
* .  increase rotation speed
* ,  decrease rotation speed

TO RUN
* run final

Total time 154 hours from Nov 3 to Dec 5  due to several false starts and pernicious bugs.

ISSUES:
Had to abandon Qt and adopt modern opengl workflow.
Had to learn C++
Code would not be written this haphazardly if I had the time to design.
Discovered interesting bug with image loader. Program will segfault in linux vm with any image that is not both square and a size that is a power of two. This was fixed with a #IFDEF
Had to abandon adding legs:   Could not easily create symmetry as translations did not match with rotations for my objects. eg move a cylinder to  .24 .15 .13  with a rotation of z y z and it will not match to its opposite side counterpart.
The time needed to create a common coordinate system for my primitives and the necessary   debugging code would impact my ability to deliver a working program.

FEATURES:
Modern OpenGL programmable pipeline
Normals on side of mouth are correct Reversed them to make them "illuminate" in the shadows
World is not constrained
Wings are transparent
primitives are all configurable
relatively clean code not based on class examples:
Used GLFW, glm and  glad header
All objects are GL_TRIANGLES
All objects are of the format XYZ|RGBA|T1T2|NxNyNz
No hardcoding of objects


Why I deserve an A:
I've created a visually appealing and somewhat complex screen saver application from a set of relatively simple and original non library developed primitives.
The code is written in C++ using the programmable pipeline with shaders and was not cut and pasted from the class  examples.
I've demonstrated lighting, shading as well as camera movements. My primitives have proper translation functions as well as normals. Demonstrated transparency as well as animation.
The object can be displayed ad rendered solids, points or lines.
Although the code is not as well written as I would like, it is not bad for a first time C++ program.
The code is fairly modular and can easily modified.
For example dflyGen.cpp can easily spawn the dragonflies programmatically if needed.
Additional shapes can easily be generated.
My objective was to minimize ambient light and never fully show the displayed objects completely as this will draw the observer into the scene more that if it were traditionally lighted.
Although I am not an artist by any means, the color-scheme was choses to add contrast and separation within the scene.
there are only 28 flies but it appears as if there are more.
Some code is not mine and attribution provided.
for example void Extra::gen_normal2 was based on http://www.lighthouse3d.com/opengl/terrain/index.php?normals
With the exception of exception of Camera.h and  stb_image.h  no code was simply taken and slapped in.
Suffered debugging hell with the programmable pipeline. spent at least two weeks debugging problems that were proven to be trivial. 



3RD PARTY CODE:
Camera.h
stb_image.h
Sphere was based on code from http://www.songho.ca/opengl/gl_sphere.html
glad.h, glad.cpp from https://glad.dav1d.de/

Code time breakdown per Wakatime:
55 hrs 58 mins	...testbed2/main.cpp
16 hrs 53 mins	...testbed2/primatives.cpp
13 hrs 14 mins	...testbed2/Cylinder.cpp
9 hrs 53 mins	...testbed2/Dragonfly.cpp
7 hrs 21 mins	...testbed2/Sphere.cpp
5 hrs 45 mins	...CLionProjects/testbed2/box.cpp
4 hrs 17 mins	...testbed2/primatives.h
4 hrs 6 mins	...testbed2/ellipse.cpp
3 hrs 22 mins	...testbed2/Parallelogram.cpp
3 hrs 6 mins	...testbed2/fragment.glsl
2 hrs 43 mins	...testbed2/Prim_base.cpp
2 hrs 36 mins	...testbed2/Parallelogram .cpp
2 hrs 22 mins	...testbed2/dflyGen.cpp
2 hrs 8 mins	...testbed2/Cylinder.h
1 hr 45 mins	...testbed2/ellipse.h
1 hr 23 mins	...testbed2/Readme.md
1 hr 8 mins	...testbed2/vertex.glsl
1 hr 8 mins	...CLionProjects/testbed2/box.h
1 hr 6 mins	...testbed2/Dragonfly.h
1 hr 5 mins	...testbed2/dflyGen.h
1 hr 4 mins	...testbed2/CMakeLists.txt
1 hr 3 mins	...testbed2/Parallelogram .h
58 mins	...testbed2/Sphere.h
55 mins	...testbed2/Parallelogram.h
54 mins	...testbed2/makefile
53 mins	...testbed2/tent_fragment.glsl
46 mins	...testbed2/vertex.shader
38 mins	...testbed2/extra_funcs.cpp
37 mins	...CLionProjects/testbed2/Color.h
34 mins	...testbed2/fragment.shader
29 mins	...testbed2/extra_funcs.h
22 mins	...testbed2/Camera.h
21 mins	...testbed2/Circle.h
16 mins	...testbed2/LightCube.h
15 mins	...testbed2/lamp_frag.glsl
15 mins	...testbed2/Color.cpp
14 mins	...testbed2/lamp_vec.glsl
13 mins	...testbed2/Prim_base.h
11 mins	...testbed2/LightCube.cpp
11 mins	...testbed2/tent_vertex.glsl
11 mins	...CLionProjects/testbed2/glad.h
10 mins	...testbed2/DragonFly.cpp
8 mins	...testbed2/DragonFly.h
7 mins	...testbed2/DflyPos.h
7 mins	...testbed2/shader.fs
7 mins	...testbed2/Shader.h
6 mins	...testbed2/tent_vector.glsl
5 mins	...testbed2/glad.cpp
4 mins	...testbed2/Circle.cpp
4 mins	...testbed2/filesystem.h
